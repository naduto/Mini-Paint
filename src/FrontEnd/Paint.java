package FrontEnd;

import BackEnd.Circle;
import BackEnd.Rectangle;
import BackEnd.Square;
import BackEnd.shapes;
import BackEnd.Triangle;
import BackEnd.LineSegment;
import BackEnd.DrawingEngines;
import java.awt.*;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.*;
import java.util.*;
import javax.swing.JColorChooser;

public class Paint extends javax.swing.JFrame {
    private ArrayList<String>shapes=new ArrayList<>();
    public DrawingEngines drawingEngine;
    private int shapeCounter = 1;
    public Graphics g;
    private shapes shape;

    public Paint() {
        setVisible(true);
        initComponents();
        this.setLocationRelativeTo(null);
        this.drawingEngine = new DrawingEngines();
        g = DrawingBoard.getGraphics();
        DrawingBoard.paintComponents(g);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        shapeselectors = new javax.swing.JComboBox<>();
        circle = new javax.swing.JButton();
        rectangle = new javax.swing.JButton();
        square = new javax.swing.JButton();
        linesegment = new javax.swing.JButton();
        DrawingBoard = new javax.swing.JPanel();
        colorize = new javax.swing.JButton();
        delete = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        resize = new javax.swing.JButton();
        move = new javax.swing.JButton();
        load = new javax.swing.JButton();
        triangle = new javax.swing.JButton();
        save = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Drawing Application");

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));

        shapeselectors.setBackground(new java.awt.Color(153, 153, 153));
        shapeselectors.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        shapeselectors.setForeground(new java.awt.Color(102, 102, 102));
        shapeselectors.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose shape" }));
        shapeselectors.setToolTipText("");
        shapeselectors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shapeselectorsActionPerformed(evt);
            }
        });

        circle.setBackground(new java.awt.Color(255, 102, 102));
        circle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        circle.setForeground(new java.awt.Color(255, 255, 255));
        circle.setText("Circle");
        circle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateShape(evt);
            }
        });

        rectangle.setBackground(new java.awt.Color(255, 102, 102));
        rectangle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        rectangle.setForeground(new java.awt.Color(255, 255, 255));
        rectangle.setText("Rectangle");
        rectangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateShape(evt);
            }
        });

        square.setBackground(new java.awt.Color(255, 102, 102));
        square.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        square.setForeground(new java.awt.Color(255, 255, 255));
        square.setText("Square");
        square.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateShape(evt);
            }
        });

        linesegment.setBackground(new java.awt.Color(255, 102, 102));
        linesegment.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        linesegment.setForeground(new java.awt.Color(255, 255, 255));
        linesegment.setText("Line Segment");
        linesegment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateShape(evt);
            }
        });

        DrawingBoard.setBackground(new java.awt.Color(255, 255, 255));

        javax.swing.GroupLayout DrawingBoardLayout = new javax.swing.GroupLayout(DrawingBoard);
        DrawingBoard.setLayout(DrawingBoardLayout);
        DrawingBoardLayout.setHorizontalGroup(
            DrawingBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 911, Short.MAX_VALUE)
        );
        DrawingBoardLayout.setVerticalGroup(
            DrawingBoardLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 448, Short.MAX_VALUE)
        );

        colorize.setBackground(new java.awt.Color(255, 102, 102));
        colorize.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        colorize.setForeground(new java.awt.Color(255, 255, 255));
        colorize.setText("Colorize");
        colorize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                colorizeActionPerformed(evt);
            }
        });

        delete.setBackground(new java.awt.Color(255, 102, 102));
        delete.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        delete.setForeground(new java.awt.Color(255, 255, 255));
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Shapes");

        resize.setBackground(new java.awt.Color(255, 102, 102));
        resize.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        resize.setForeground(new java.awt.Color(255, 255, 255));
        resize.setText("Resize");
        resize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resizeActionPerformed(evt);
            }
        });

        move.setBackground(new java.awt.Color(255, 102, 102));
        move.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        move.setForeground(new java.awt.Color(255, 255, 255));
        move.setText("Move");
        move.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moveActionPerformed(evt);
            }
        });

        load.setBackground(new java.awt.Color(0, 153, 153));
        load.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        load.setForeground(new java.awt.Color(255, 255, 255));
        load.setText("Load");
        load.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadActionPerformed(evt);
            }
        });

        triangle.setBackground(new java.awt.Color(255, 102, 102));
        triangle.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        triangle.setForeground(new java.awt.Color(255, 255, 255));
        triangle.setText("Triangle");
        triangle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateShape(evt);
            }
        });

        save.setBackground(new java.awt.Color(0, 153, 153));
        save.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        save.setForeground(new java.awt.Color(255, 255, 255));
        save.setText("Save");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon("G:\\Downloads\\computer.png")); // NOI18N

        jLabel5.setIcon(new javax.swing.ImageIcon("G:\\Downloads\\computer (1).png")); // NOI18N

        jLabel6.setIcon(new javax.swing.ImageIcon("G:\\Downloads\\shapes.png")); // NOI18N

        jLabel3.setBackground(new java.awt.Color(255, 255, 255));
        jLabel3.setFont(new java.awt.Font("Segoe UI", 3, 18)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setIcon(new javax.swing.ImageIcon("G:\\Downloads\\paint-palette.png")); // NOI18N
        jLabel3.setText("Shapes Paint");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addComponent(resize, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(shapeselectors, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(load, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(colorize, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(move, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(37, 37, 37))
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(linesegment, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(rectangle, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addComponent(circle, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(square, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 176, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(triangle, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addComponent(DrawingBoard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(circle, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(square, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(linesegment, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(rectangle, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(triangle, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(shapeselectors, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(resize, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(delete, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(colorize, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(move, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(10, 10, 10)
                        .addComponent(jLabel5))
                    .addComponent(save, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(load, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(DrawingBoard, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void shapeselectorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shapeselectorsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_shapeselectorsActionPerformed

    private void CreateShape(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateShape
        shape = null;
        switch (evt.getActionCommand()) {
            case "Circle":
                shape = new Circle(0.5);
                String radiusStr = JOptionPane.showInputDialog(null,"Enter radius:");
                if (radiusStr == null) {
                    JOptionPane.showMessageDialog(null, "Operation canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                while (radiusStr.equals("")) {
                    JOptionPane.showMessageDialog(null, "Feild can't be empty!!!","Error",JOptionPane.ERROR_MESSAGE);
                    radiusStr = JOptionPane.showInputDialog("Enter radius:");
                }
                double radius = Double.parseDouble(radiusStr);
                Map<String, Double> properties = shape.getproperties();
                properties.put("radius", radius);
                shape.setProPerties(properties);
                break;
            case "Rectangle":
                shape = new Rectangle(0.5, 0.7);
                String lengthStr = JOptionPane.showInputDialog("Enter Length:");
                if (lengthStr == null) {
                    JOptionPane.showMessageDialog(null, "Operation canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                while (lengthStr.equals("")) {
                    JOptionPane.showMessageDialog(null, "Feild can't be empty!!!","Error",JOptionPane.ERROR_MESSAGE);
                    lengthStr = JOptionPane.showInputDialog("Enter Length:");
                }
                String widthStr = JOptionPane.showInputDialog("Enter Width:");
                if (widthStr == null) {
                    JOptionPane.showMessageDialog(null, "Operation canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                while (widthStr.equals("")) {
                    JOptionPane.showMessageDialog(null, "Feild can't be empty!!!","Error",JOptionPane.ERROR_MESSAGE);
                    widthStr = JOptionPane.showInputDialog("Enter Width:");
                }
                double length = Double.parseDouble(lengthStr);
                double width = Double.parseDouble(widthStr);
                Map<String, Double> properties1 = shape.getproperties();
                properties1.put("length", length);
                properties1.put("width", width);
                shape.setProPerties(properties1);

                break;
            case "Square":
                shape = new Square(20);
                String SidelengthStr = JOptionPane.showInputDialog("Enter SideLength:");
                if (SidelengthStr == null) {
                    JOptionPane.showMessageDialog(null, "Operation canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                while (SidelengthStr.equals("")) {
                    JOptionPane.showMessageDialog(null, "Feild can't be empty!!!","Error",JOptionPane.ERROR_MESSAGE);
                    SidelengthStr = JOptionPane.showInputDialog("Enter SideLength:");
                }
                double Sidelength = Double.parseDouble(SidelengthStr);
                Map<String, Double> properties2 = shape.getproperties();
                properties2.put("length", Sidelength);
                properties2.put("width", Sidelength);
                shape.setProPerties(properties2);
                break;
            case "Triangle":
                String X1 = JOptionPane.showInputDialog("Enter first point X:");
                if (X1 == null) {
                    JOptionPane.showMessageDialog(null, "Operation canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                while (X1.equals("")) {
                    JOptionPane.showMessageDialog(null, "Feild can't be empty!!!","Error",JOptionPane.ERROR_MESSAGE);
                    X1 = JOptionPane.showInputDialog("Enter first point X:");
                }

                String Y1 = JOptionPane.showInputDialog("Enter first point Y:");
                if (Y1 == null) {
                    JOptionPane.showMessageDialog(null, "Operation canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                while (Y1.equals("")) {
                    JOptionPane.showMessageDialog(null, "Feild can't be empty!!!","Error",JOptionPane.ERROR_MESSAGE);
                    Y1 = JOptionPane.showInputDialog("Enter first point Y:");
                }

                String X2 = JOptionPane.showInputDialog("Enter second point X:");
                if (X2 == null) {
                    JOptionPane.showMessageDialog(null, "Operation canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                while (X2.equals("")) {
                    JOptionPane.showMessageDialog(null, "Feild can't be empty!!!","Error",JOptionPane.ERROR_MESSAGE);
                    X2 = JOptionPane.showInputDialog("Enter second point X:");
                }

                String Y2 = JOptionPane.showInputDialog("Enter second point Y:");
                if (Y2 == null) {
                    JOptionPane.showMessageDialog(null, "Operation canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                while (Y2.equals("")) {
                    JOptionPane.showMessageDialog(null, "Feild can't be empty!!!","Error",JOptionPane.ERROR_MESSAGE);
                    Y2 = JOptionPane.showInputDialog("Enter second point Y:");
                }

                String X3 = JOptionPane.showInputDialog("Enter third point X:");
                if (X3 == null) {
                    JOptionPane.showMessageDialog(null, "Operation canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                while (X3.equals("")) {
                    JOptionPane.showMessageDialog(null, "Feild can't be empty!!!","Error",JOptionPane.ERROR_MESSAGE);
                    X3 = JOptionPane.showInputDialog("Enter third point X:");
                }

                String Y3 = JOptionPane.showInputDialog("Enter third point Y:");
                if (Y3 == null) {
                    JOptionPane.showMessageDialog(null, "Operation canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                while (Y3.equals("")) {
                    JOptionPane.showMessageDialog(null, "Feild can't be empty!!!","Error",JOptionPane.ERROR_MESSAGE);
                    Y3 = JOptionPane.showInputDialog("Enter third point Y:");
                }
                int xint1 = Integer.parseInt(X1);
                int yint1 = Integer.parseInt(Y1);
                int xint2 = Integer.parseInt(X2);
                int yint2 = Integer.parseInt(Y2);
                int xint3 = Integer.parseInt(X3);
                int yint3 = Integer.parseInt(Y3);
                int[] xpoints = {xint1, xint2, xint3};
                int[] ypoints = {yint1, yint2, yint3};
                shape = new Triangle(xpoints, ypoints);
                break;
            case "Line Segment":

                String x1Str = JOptionPane.showInputDialog("Enter start point X:");
                if (x1Str == null) {
                    JOptionPane.showMessageDialog(null, "Operation canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                while (x1Str.equals("")) {
                    JOptionPane.showMessageDialog(null, "Feild can't be empty!!!","Error",JOptionPane.ERROR_MESSAGE);
                    x1Str = JOptionPane.showInputDialog("Enter start point X:");
                }
                String y1Str = JOptionPane.showInputDialog("Enter start point Y:");
                if (y1Str == null) {
                    JOptionPane.showMessageDialog(null, "Operation canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                while (y1Str.equals("")) {
                    JOptionPane.showMessageDialog(null, "Feild can't be empty!!!","Error",JOptionPane.ERROR_MESSAGE);
                    y1Str = JOptionPane.showInputDialog("Enter start point Y:");
                }
                int x1 = Integer.parseInt(x1Str);
                int y1 = Integer.parseInt(y1Str);

                String x2Str = JOptionPane.showInputDialog("Enter the lenght of the line :");
                if (x2Str == null) {
                    JOptionPane.showMessageDialog(null, "Operation canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                while (x2Str.equals("")) {
                    JOptionPane.showMessageDialog(null, "Feild can't be empty!!!","Error",JOptionPane.ERROR_MESSAGE);
                    x2Str = JOptionPane.showInputDialog("Enter the lenght of the line :");
                }
                String y2Str = JOptionPane.showInputDialog("Enter the angle under the line :");
                if (y2Str == null) {
                    JOptionPane.showMessageDialog(null, "Operation canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                while (y2Str.equals("")) {
                    JOptionPane.showMessageDialog(null, "Feild can't be empty!!!","Error",JOptionPane.ERROR_MESSAGE);
                    y2Str = JOptionPane.showInputDialog("Enter the angle under the line :");
                }
                double length1 = Double.parseDouble(x2Str);
                double angle = Double.parseDouble(y2Str);
                double angle1 = Math.toRadians(angle);
                int dx = (int) (length1 * Math.cos(angle1));
                int dy = (int) (length1 * Math.sin(angle1));
                int x2 = x1 + dx;
                int y2 = y1 + dy;
                shape =new LineSegment(new Point(x1,y1),new Point(x2,y2),angle1);
                break;
        }
        if (shape != null) {
            if (evt.getActionCommand() != "Line Segment" && evt.getActionCommand() != "Triangle" && evt.getActionCommand() != "Trapezoid") {

                String XStr = JOptionPane.showInputDialog("Enter Position at x:");
                if (XStr == null) {
                    JOptionPane.showMessageDialog(null, "Operation canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                while (XStr.equals("")) {
                    JOptionPane.showMessageDialog(null, "Feild can't be empty!!!","Error",JOptionPane.ERROR_MESSAGE);
                    XStr = JOptionPane.showInputDialog("Enter Position at x:");
                }
                String YStr = JOptionPane.showInputDialog("Enter position at y:");
                if (YStr == null) {
                    JOptionPane.showMessageDialog(null, "Operation canceled.", "Canceled", JOptionPane.WARNING_MESSAGE);
                    return;
                }
                while (YStr.equals("")) {
                    JOptionPane.showMessageDialog(null, "Feild can't be empty!!!","Error",JOptionPane.ERROR_MESSAGE);
                    YStr = JOptionPane.showInputDialog("Enter position at y:");
                }
                int x = Integer.parseInt(XStr);
                int y = Integer.parseInt(YStr);
                shape.setPosition(new Point(x, y));

            }
            shape.draw(g);
            shape.setColor(Color.BLACK);
            drawingEngine.addShape(shape);
            String shapename = evt.getActionCommand() + String.format("%02d", shapeCounter++);
            shape.setshapename(shapename);
            shapeselectors.addItem(shapename);

        }
    }//GEN-LAST:event_CreateShape

    private void colorizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_colorizeActionPerformed
        String selectedShape = (String) shapeselectors.getSelectedItem();
        if (selectedShape != null) {
            for (int i = 0; i < drawingEngine.getShapes().length; i++) {
                if (drawingEngine.getShapes()[i].getshapename().equals(selectedShape)) {
                    shape = drawingEngine.getShapes()[i];
                    Color newColor = JColorChooser.showDialog(this, "Choose Color", shape.getColor());
                    if (newColor != null) {
                        shape.setColor(newColor);
                    }
                    newColor = JColorChooser.showDialog(this, "Choose fill Color", shape.getFillColor());
                    if (newColor != null) {
                        shape.setFillColor(newColor);
                    }
                    DrawingBoard.paint(g);
                    drawingEngine.refresh(g);
                    return;
                }
            }

        }
        JOptionPane.showMessageDialog(null, "Shape not found!!!","Error",JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_colorizeActionPerformed

    public JPanel getdraw() {
        return this.DrawingBoard;
    }
    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        String selectedShape = (String) shapeselectors.getSelectedItem();
        if (selectedShape != null) {
            shape = null;
            for (int i = 0; i < drawingEngine.getShapes().length; i++) {
                if (drawingEngine.getShapes()[i].getshapename().equals(selectedShape)) {
                    shape = drawingEngine.getShapes()[i];
                    break;
                }
            }
            if (shape != null) {
                drawingEngine.removeShape(shape);
                shapeselectors.removeItem(selectedShape);
                DrawingBoard.paint(g);
                drawingEngine.refresh(g);
            } else {
                JOptionPane.showMessageDialog(null, "Shape not found!!!","Error",JOptionPane.ERROR_MESSAGE);
            }

        }

    }//GEN-LAST:event_deleteActionPerformed

    private void resizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resizeActionPerformed
        String selectedShape = (String) shapeselectors.getSelectedItem();
        if (selectedShape != null) {
            String kk = "";
            for (char c : selectedShape.toCharArray()) {
                if(Character.isDigit(c))
                {
                    break;
                }
                kk+=c;
            }
            shape = null;
            for (int i = 0; i < drawingEngine.getShapes().length; i++) {
                if (drawingEngine.getShapes()[i].getshapename().equals(selectedShape)) {
                    shape = drawingEngine.getShapes()[i];
                    break;
                }
            }
            if(shape!=null){
            switch(kk)
            {
                case "Circle":
                    new ResizeCircle(Paint.this, shape).setVisible(true);
                    break;
                case "Rectangle":
                    new ResizeRectangle(Paint.this,shape).setVisible(true);
                    break;
                case "Square":
                    new ResizeSquare(Paint.this,shape).setVisible(true);
                    break;
                case "Line Segment":
                    new ResizeLineSegment(Paint.this,shape).setVisible(true);
                    break;
                case "Triangle":
                    new ResizeTriangle(Paint.this,shape).setVisible(true);
                    break;
            }
            }
            else
            {
                JOptionPane.showMessageDialog(null, "Shape not found!!!","Error",JOptionPane.ERROR_MESSAGE);

            }
        }
    }//GEN-LAST:event_resizeActionPerformed

    private void moveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moveActionPerformed
        String selectedShape = (String) shapeselectors.getSelectedItem();
        if (selectedShape != null) {
            shape = null;
            for (int i = 0; i < drawingEngine.getShapes().length; i++) {
                if (drawingEngine.getShapes()[i].getshapename().equals(selectedShape)) {
                    shape = drawingEngine.getShapes()[i];
                    break;
                }
            }
            if (shape != null) {
                new MoveShapee(Paint.this, shape).setVisible(true);

            } else {
                JOptionPane.showMessageDialog(null, "Shape not found!!!","Error",JOptionPane.ERROR_MESSAGE);
            }

        }
    }//GEN-LAST:event_moveActionPerformed

    private void loadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadActionPerformed

         JFileChooser fileChooser = new JFileChooser();
            fileChooser.setDialogTitle("Load Shapes");

            int userSelection = fileChooser.showOpenDialog(DrawingBoard);
            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToLoad = fileChooser.getSelectedFile();
                loadShapes(fileToLoad);
            }
    }//GEN-LAST:event_loadActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        JFileChooser fileChooser=new JFileChooser();
        fileChooser.setDialogTitle("Save Shapes");
        int userselection=fileChooser.showSaveDialog(DrawingBoard);
        if (userselection == JFileChooser.APPROVE_OPTION) {
                File fileToSave = fileChooser.getSelectedFile();
                this.drawingEngine.saveShapes(fileToSave);               
            }
    }//GEN-LAST:event_saveActionPerformed

    

    private  void loadShapes(File file) {
        try (BufferedReader reader = new BufferedReader(new FileReader(file))) {
            shapes.clear(); 
            shapeselectors.removeAllItems();
            String line;
            this.drawingEngine.clear();
            while ((line = reader.readLine()) != null) {
                String[] S = line.split("-");
                shapes shape=null;
                shapeselectors.addItem(S[1]);
                switch(S[0])
                {
                    case "1":
                        shape=new Circle(Double.parseDouble(S[2]));
                        shape.toshape(S);
        
                        break;
                    case "2":
                        int []xpoints={Integer.parseInt(S[4]),Integer.parseInt(S[5]),Integer.parseInt(S[6])};
                        int []ypoints={Integer.parseInt(S[7]),Integer.parseInt(S[8]),Integer.parseInt(S[9])};
                        shape=new Triangle(xpoints,ypoints);
                        shape.toshape(S);
                        break;
                    case "3":
                        shape=new Rectangle(Double.parseDouble(S[2]),Double.parseDouble(S[3]));
                        shape.toshape(S);
                        break;
                    case "4":
                        shape=new LineSegment(new Point(Integer.parseInt(S[5]),Integer.parseInt(S[6])),new Point(Integer.parseInt(S[7]),Integer.parseInt(S[8])),Double.parseDouble(S[4]));
                        shape.toshape(S);
                        break;
                  
                }
                this.drawingEngine.addShape(shape);
            }
             DrawingBoard.paint(g);
             drawingEngine.refresh(g);
            JOptionPane.showMessageDialog(null, "Shapes loaded successfully!");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(null, "Error loading shapes!!!","Error",JOptionPane.ERROR_MESSAGE);
        }
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Paint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Paint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Paint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Paint.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Paint().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel DrawingBoard;
    private javax.swing.JButton circle;
    private javax.swing.JButton colorize;
    private javax.swing.JButton delete;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton linesegment;
    private javax.swing.JButton load;
    private javax.swing.JButton move;
    private javax.swing.JButton rectangle;
    private javax.swing.JButton resize;
    private javax.swing.JButton save;
    private javax.swing.JComboBox<String> shapeselectors;
    private javax.swing.JButton square;
    private javax.swing.JButton triangle;
    // End of variables declaration//GEN-END:variables
}
